<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[chrisblogs]]></title>
  <link href="http://caguthrie.github.io/atom.xml" rel="self"/>
  <link href="http://caguthrie.github.io/"/>
  <updated>2014-02-27T18:08:22-05:00</updated>
  <id>http://caguthrie.github.io/</id>
  <author>
    <name><![CDATA[Chris Guthrie]]></name>
    <email><![CDATA[christopher.guthrie@flatironschool.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Smooth as Sinatra]]></title>
    <link href="http://caguthrie.github.io/blog/2014/02/27/smooth-as-sinatra/"/>
    <updated>2014-02-27T11:10:24-05:00</updated>
    <id>http://caguthrie.github.io/blog/2014/02/27/smooth-as-sinatra</id>
    <content type="html"><![CDATA[<p><i>The best revenge is massive success.<br/>-Frank Sinatra</i><br/>Even in death, Sinatra is continuing to make people swoon.  Sinatra is a web framework for Ruby applications and it makes creating and deploying web applocations super easy.  As a Sinatra beginner, I have been looking into the documentation to find some neat tricks with this framework and I&#8217;d like to share them with you.</p>


<br/><b><h3>Sinatra Splat</b></h3><br/><p>Sintra is flexible in that there are many ways to implement wildcards in pathnames.  For example:</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/favorite_singer/*/favorite_album/*&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># example: /favorite_band/frank_sinatra/favorite_album/come_fly_with_me</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:splat</span><span class="o">]</span> <span class="c1"># =&gt; [&quot;frank_sinatra&quot;, &quot;come_fly_with_me&quot;]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, you can let your user go to any sub-path where your wildcards are, and get those sub-path names back in a handy array using the :splat symbol key in the params hash.  This could be useful in a product catalog, or in any case where there could be a large number of keys that could return data from a database.  There are other useful ways to use splats in pathnames, like for downloads:</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/download/*.*&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># goes to /download/path/file.zip</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:splat</span><span class="o">]</span> <span class="c1"># =&gt; [&quot;path/file&quot;, &quot;zip&quot;]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you wanted a custom page for your users to look at while they download a file, you could easily do something like that.  Site&#8217;s like cnet.com and download.com may use Sinatra as they similar downloader pages.</p>


<br/><b><h3>Multiple gets for a sub-path</b></h3><br/><p>Sometimes you want to have a specific sub-path case, with a catch-all, psuedo-else get method if a different sub-path is chosen.  Looking back at the previous sentence, it may make zero sense to some people, so I have an easy example below:</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/the_capital_of/california/:cap&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pass</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:cap</span><span class="o">].</span><span class="n">downcase</span> <span class="o">!=</span> <span class="s2">&quot;sacramento&quot;</span>
</span><span class='line'>  <span class="s2">&quot;Correct!!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/the_capital_of/california/*&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s2">&quot;Your knowledge of 3rd grade US geography is disasterous!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the pass method in sinatra, the rest of the logic in the first get block is not executed and the next get method fitting the path parameters is executed.  It&#8217;s another added bonus of the lazy ruby interpreter.</p>


<br/><b><h3>Browser Redirect</b></h3><br/><p>Lastly, you may want to redirect a user to a different path after you&#8217;ve taken some action.  Maybe, for example, after you&#8217;ve filled out a form or shown a quick advertisment.  The redirect method is a quick way to do that, and you can implement it like so:




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/restricted_area&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s2">&quot;Why are you here!? Go away!&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">redirect</span> <span class="n">to</span><span class="p">(</span><span class="s1">&#39;/public_area&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/public_area&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s2">&quot;Welcome!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So pull up a fine leather chair, a glass of scotch, and enjoy the classiness that Sinatra has to offer you.  If there&rsquo;s a problem in a web app you need solving, old blue eyes has you covered.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumberable Is Enumermazing]]></title>
    <link href="http://caguthrie.github.io/blog/2014/02/12/enumberable-is-enumermazing/"/>
    <updated>2014-02-12T13:35:30-05:00</updated>
    <id>http://caguthrie.github.io/blog/2014/02/12/enumberable-is-enumermazing</id>
    <content type="html"><![CDATA[<p>Coming from lower-level languages, the vast spectrum of built-in classes, modules, and methods in Ruby is absolutely mind-blowing.  One of the most amazing of these is Enumerable.  Enumerable is a mixin, which means that it adds functionality to the class that uses it.  Oh, and functionality there is.  The two most common objects that can call Enumerable methods are arrays and hashes.  It is robust and adds some methods that do exactly what you think they would.  For example:</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">find</span>
</span><span class='line'><span class="n">any?</span>
</span><span class='line'><span class="kp">include</span><span class="p">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>The functionality I have found most useful are the searching and sorting methods.  I&#8217;ll tell you about three of my favorites now.</p>


<p><b><h3>sort</h3></b></p>

<p>The sort method might seem like a shy, simplistic wallflower, but, with the power of blocks in ruby, sort transforms into a something any high school prom king would tremble at the sight of.  Take this example:</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">favorite_people</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:poet</span> <span class="o">=&gt;</span> <span class="s2">&quot;Walt Whitman&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:baseball_player</span> <span class="o">=&gt;</span> <span class="s2">&quot;Tony Gwynn&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:jeopardy_champion</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ken Jennings&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:billionaire</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bill Gates&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:dean</span> <span class="o">=&gt;</span> <span class="s2">&quot;Avi Flombaum&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s say you have this hash of favorite people and wish to sort it into an array, based on alphabetical order of their last name.  Is that description of what I want to do longer than the code?</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">favorite_people</span><span class="o">.</span><span class="n">sort</span><span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [[:dean, &quot;Avi Flombaum&quot;],</span>
</span><span class='line'><span class="c1">#   [:billionaire, &quot;Bill Gates&quot;],</span>
</span><span class='line'><span class="c1">#   [:baseball_player, &quot;Tony Gwynn&quot;],</span>
</span><span class='line'><span class="c1">#   [:jeopardy_champion, &quot;Ken Jennings&quot;],</span>
</span><span class='line'><span class="c1">#   [:poet, &quot;Walt Whitman&quot;]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yep.</p>

<p>When used on a hash, sort converts your hash to an array of arrays of length 2, where each sub-array is a key/value pair.  This is defined in the hash&#8217;s each method, a method I will talk more about a little later.  Enumerable&#8217;s sort function uses these return values to sort your input.  The great thing about the sort method is that you can sort it however you tell your program to.  No more iterating though your entire data structure.  This is even more relevant because if you have an object you would like to use with Enumerable, all you have to do is define an each method in your class which yields each value you would like Enumerable to operate on.</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DeliciousFood</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">yum</span>
</span><span class='line'>    <span class="o">[</span><span class="s2">&quot;Tangerine&quot;</span><span class="p">,</span> <span class="s2">&quot;Burrito&quot;</span><span class="p">,</span> <span class="s2">&quot;Cake&quot;</span><span class="p">,</span> <span class="s2">&quot;Artisanal Pizza&quot;</span><span class="p">,</span> <span class="s2">&quot;Bacon Grease&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each</span>
</span><span class='line'>    <span class="n">yum</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">DeliciousFood</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">sort</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">a</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span> <span class="p">}</span> <span class="c1">#=&gt; [&quot;Artisanal Pizza&quot;, &quot;Bacon Grease&quot;, &quot;Burrito&quot;, &quot;Cake&quot;, &quot;Tangerine&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You want your class to be Enumermazing?  Just like that, it&#8217;s as easy as defining an each method.</p>


<p><b><h3>grep</h3></b></p>

<p>The method grep is, just as you command line monkeys would think, a function that allows you to search through your data and find what matches your search parameter(s).  Just like sort, and many other methods in Enumerable, grep can take a block to create your own custom searches.  Let&#8217;s return to our DeliciousFood class above and try searching for each piece data that includes the letter &#8220;k&#8221; or &#8220;z&#8221;, because I only eat food that contains at least one of those letters:</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DeliciousFood</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/(k|z)/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="s2">&quot;I ate some &quot;</span> <span class="o">+</span> <span class="n">a</span> <span class="p">}</span> <span class="c1">#=&gt; [&quot;I ate some Cake&quot;, &quot;I ate some Artisanal Pizza&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><b><h3>partition</h3></b></p>

<p>Lastly, a fun, easy, and quick way to put things into two different arrays.  The partition method takes in some data, and outputs it in an array of two arrays.  If the block passed into it evaluates as true, it gets placed in the first sub-array.  If not, it gets placed in the second sub-array.  Lets say I&#8217;m hungry but I&#8217;m confused about what to eat from my kitchen table:</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">food</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Tangerine&quot;</span><span class="p">,</span> <span class="s2">&quot;Burrito&quot;</span><span class="p">,</span> <span class="s2">&quot;Cake&quot;</span><span class="p">,</span> <span class="s2">&quot;Artisanal Pizza&quot;</span><span class="p">,</span> <span class="s2">&quot;Bacon Grease&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">not_food</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Concrete&quot;</span><span class="p">,</span> <span class="s2">&quot;Fedora&quot;</span><span class="p">,</span> <span class="s2">&quot;Silica Gel&quot;</span><span class="p">,</span> <span class="s2">&quot;Cigarette Butt&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_kitchen_table</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Concrete&quot;</span><span class="p">,</span> <span class="s2">&quot;Tangerine&quot;</span><span class="p">,</span> <span class="s2">&quot;Burrito&quot;</span><span class="p">,</span> <span class="s2">&quot;Fedora&quot;</span><span class="p">,</span> <span class="s2">&quot;Cake&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="n">my_kitchen_table</span><span class="o">.</span><span class="n">partition</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">food</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">}</span> <span class="c1">#=&gt; [[&quot;Tangerine&quot;, &quot;Burrito&quot;, &quot;Cake&quot;],[&quot;Concrete&quot;,&quot;Fedora&quot;]]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">output</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#=&gt; [&quot;Tangerine&quot;, &quot;Burrito&quot;, &quot;Cake&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thankfully Enumerable and partition saved me from eating concrete or my fedora.  What can&#8217;t Ruby do?</p>

]]></content>
  </entry>
  
</feed>
